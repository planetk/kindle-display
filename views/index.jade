extends layout

block content
  - weather = weather_underground

  // pre= JSON.stringify(traffic, "", " ")

  #canvas
    #status
      if new Date().getHours() < 12 && awigo[weather.forecast[0].date]
        #awigo
          for item in awigo[weather.forecast[0].date]
            strong= item.name

    #current
      img(src="/images/weather/#{weather.today.icon}.svg")
      p.temp #{netatmo.aussen[0].value[0][0]}°

    #special
      if special_day
        p(data-type=special_day[0].type)
          if special_day[0].type == "namenstag"
            small Namenstag
          a(href=special_day[0].url, target="_blank")= special_day[0].name
      img(src=today_icon)

    #today
      if weather.probabilityMax >= 20
        #rain
          .rain-label
            p #{weather.probabilityMax}<small>%</small>
            img(src="images/drop.svg")
          .ct-chart
          script.
            var data = {
              labels: [#{weather.rain.hour.join(',')}],
              series: [
                [#{weather.rain.probability.join(',')}]
              ]
            };

            var options = {
              width: 150,
              height: 70,
              lineSmooth: true,
              low: 0,
              high: #{weather.probabilityMax},
              showPoint: false,
              axisX: {
                showGrid: false,
                showLabel: true,
                offset: 0
              },
              axisY: {
                showGrid: true,
                showLabel: false,
                offset: 5
              }
            };

            Chartist.Line('.ct-chart', data, options);

      img#house(src="/images/house.svg")
      p.temp-in #{netatmo.innen[0].value[0][0]}°
      p.temp-out #{netatmo.aussen[0].value[0][0]}
      // img#bypass(src="/images/bypass_#{pluggit.bypass=='open' ? 'open' : 'closed'}.svg")

    #forecast
      for entry in weather.forecast
        section
          h2
            =entry.day
            // if awigo[entry.date]
            //   for item in awigo[entry.date]
            //     strong= item.letter
            if moon[entry.date]
              img.moon(src="/images/moon/#{moon[entry.date]}.svg")
          img(src="/images/weather/#{entry.icon}.svg")
          .range
            .grid
              for grid in [-20,-10,0,10,20,30]
                if weather.temperatureMax >= grid && grid >= weather.temperatureMin
                  hr.grid-line(class="grid-line_#{grid}", style="top: #{100/(weather.temperatureMax-weather.temperatureMin)*(weather.temperatureMax-grid)}%")
            .inner(style="top: #{100/(weather.temperatureMax-weather.temperatureMin)*(weather.temperatureMax-entry.max)}%; bottom: #{100/(weather.temperatureMin-weather.temperatureMax)*(weather.temperatureMin-entry.min)}%")
              .max= formatTemp(entry.max)
              .min= formatTemp(entry.min)

  //-for debugging
  //-pre= JSON.stringify(awigo, "", " ")
